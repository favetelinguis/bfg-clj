#+title: Readme
#+startup: inlineimages

Run tests with
clj -X:test

run program
clj -m main

#+NAME: Merge protfolio, account and order manager
#+begin_src plantuml :file ./images/signalmerged.png
title All event flows

Stream->Market: CHART
Stream->Market: MARKET
Stream->Market: UNSUBSCRIBE
Stream->Market: SUBSCRIBE
Stream->Order: TRADE
Stream->Order: ACCOUNT
Market->Strategy1: <epic>
Strategy1->Order: SIGNAL
Order->CommandExecutor: MAKE-ORDER
CommandExecutor->Order: ORDER-CREATE-FAILURE
#+end_src

#+RESULTS: Merge protfolio, account and order manager
[[file:./images/signalmerged.png]]

#+NAME: All event flows
#+begin_src plantuml :file ./images/signal.png
title All event flows

Stream->Market: ROUTE :CHART:id
Stream->Market: ROUTE :MARKET:id
Stream->Market: ROUTE :UNSUBSCRIBE:CHART:id
Stream->Market: ROUTE :UNSUBSCRIBE:MARKET:id
Stream->Order: ROUTE :TRADE:id
Stream->Account: ROUTE :ACCOUNT:id
Market->Strategy1: ::e/name
Strategy1->Portfolio ::e/signal
Account->Portfolio ::e/balance
Portfolio->Order ::e/make-order
Order->CommandExecutor ::e/make-order
CommandExecutor->Order ::e/exit
Order->Portfolio ::e/exit
Order->Portfolio ::e/filled
#+end_src

#+RESULTS: All event flows
[[file:./images/signal.png]]

#+NAME: Order open to close flow
#+begin_src plantuml :file ./images/order.png
title Order open to exit flow

[*] --> OrderInitiated : ::e/order-new
state c <<choice>>
OrderInitiated --> c
c --> OrderFilled : ::e/filled
c --> [*] : ::e/exit
OrderFilled --> [*] : ::e/exit
#+end_src

#+RESULTS: Order open to close flow
[[file:./images/order.png]]
